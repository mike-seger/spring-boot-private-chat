angular.module("org.privatechat",["ngRoute","angular.filter","org.privatechat.login.LoginController","org.privatechat.registration.RegistrationController","org.privatechat.friendslist.FriendsListController","org.privatechat.chat.ChatController","org.privatechat.user.AuthService","org.privatechat.shared.websocket.WebSocket"]).run(["$rootScope","$location","AuthService","WebSocket",function(e,t,n,r){e.$on("$routeChangeStart",function(e,o){o.$$route&&o.$$route.auth&&(n.hasActiveSession()?r.isConnected()||r.connect():t.path("/login"))})}]).factory("authHttpResponseInterceptor",["$q","$location",function(e,t){var n=function(){t.path("/login")};return{response:function(t){return 401===t.status&&n(),t||e.when(t)},responseError:function(t){return 401===t.status&&n(),e.reject(t)}}}]).config(["$routeProvider","$httpProvider",function(e,t){t.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",t.defaults.withCredentials=!0,t.defaults.headers.get||(t.defaults.headers.get={}),t.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",t.defaults.headers.get["Cache-Control"]="no-cache",t.defaults.headers.get.Pragma="no-cache",t.interceptors.push("authHttpResponseInterceptor"),e.when("/login",{controller:"LoginController",templateUrl:"login/LoginView.html"}).when("/register",{controller:"RegistrationController",templateUrl:"registration/RegistrationView.html"}).when("/friendslist",{controller:"FriendsListController",templateUrl:"friendslist/FriendsListView.html",auth:!0}).when("/private-chat/:id",{controller:"ChatController",templateUrl:"chat/ChatView.html",auth:!0}).otherwise({redirectTo:"/login"})}]),angular.module("org.privatechat.chat.ChatController",["org.privatechat.shared.theme.Navbar","org.privatechat.chat.ChatService","org.privatechat.user.UserService","org.privatechat.shared.websocket.WebSocket"]).controller("ChatController",["$scope","$routeParams","ChatService","UserService","$timeout","WebSocket",function(e,t,n,r,o,i){var s,a,c=e,u=1e3,l=function(){n.establishChatSession(r.getUserInfo().id,t.id).then(f).then(h)},f=function(e){s=i.get(),a=e.data.channelUuid,c.userOneFullName=e.data.userOneFullName,c.userTwoFullName=e.data.userTwoFullName,s.subscribe("/topic/private.chat."+a,v)},h=function(){n.getExistingChatSessionMessages(a).then(function(e){c.showChat=!0,e.data.forEach(function(e){p(e)}),d()})},d=function(){var e=$("#chat-area");o(function(){e.length>0&&e.scrollTop(e[0].scrollHeight)},u)},p=function(e,t){c.messages.push({contents:e.contents,isFromRecipient:e.fromUserId!=r.getUserInfo().id,author:e.fromUserId==r.getUserInfo().id?c.userOneFullName:c.userTwoFullName}),t&&c.$apply()},v=function(e){p(JSON.parse(e.body),!0),d()};c.sendChatMessage=function(){c.currentMessage&&""!==c.currentMessage.trim()&&(s.send("/app/private.chat."+a,{},JSON.stringify({fromUserId:r.getUserInfo().id,toUserId:t.id,contents:c.currentMessage})),c.currentMessage=null)},i.whenConnected(l)}]),angular.module("org.privatechat.chat.ChatService",[]).factory("ChatService",["$http",function(e){var t=function(t,n){return e({method:"PUT",url:"/api/private-chat/channel",data:{userIdOne:t,userIdTwo:n},headers:{"Content-Type":"application/json"}})},n=function(t){return e({method:"GET",url:"/api/private-chat/channel/"+t,headers:{"Content-Type":"application/json"}})};return{establishChatSession:t,getExistingChatSessionMessages:n}}]),angular.module("org.privatechat.friendslist.FriendsListController",["org.privatechat.shared.theme.Navbar","org.privatechat.user.UserService"]).controller("FriendsListController",["$scope","UserService",function(e,t){var n=e,r=function(){return t.getFriendslist().then(function(e){n.users=e.data})},o=function(){r()};o()}]),angular.module("org.privatechat.login.LoginController",["org.privatechat.user.AuthService","org.privatechat.user.UserService"]).controller("LoginController",["$scope","$location","AuthService","UserService",function(e,t,n,r){var o=e;o.email=null,o.password=null;var i=function(){},s=function(){t.path("/friendslist")};o.attemptLogin=function(){n.login({username:o.email,password:o.password}).then(function(){return r.establishUserInfo()}).then(function(){s()})["catch"](function(){alert("Invalid credentials.")})},i()}]),angular.module("org.privatechat.registration.RegistrationController",["org.privatechat.user.AuthService"]).controller("RegistrationController",["$scope","$location","AuthService",function(e,t,n){var r=e;r.email=null,r.password=null,r.fullName=null;var o=function(){},i=function(){t.path("/login")};r.attemptRegistration=function(){n.register({email:r.email,password:r.password,fullName:r.fullName}).then(function(){alert("Successfully registered."),i()})["catch"](function(e){alert(e.data)})},o()}]),angular.module("org.privatechat.user.AuthService",["org.privatechat.user.UserService","org.privatechat.shared.websocket.WebSocket"]).factory("AuthService",["$http","$location","UserService","WebSocket","$rootScope",function(e,t,n,r,o){var i=function(t){return e({method:"POST",url:"/login",data:$.param(t),headers:{"Content-Type":"application/x-www-form-urlencoded"}})},s=function(){return n.clearUserInfo(),r.disconnect(),t.path("/"),e({method:"POST",url:"/logout"})};o.$on("logout-event",s);var a=function(t){return e({method:"POST",url:"/api/user/register",data:t,headers:{"Content-Type":"application/json"}})},c=function(){var e=n.getUserInfo();return null!==e?!0:!1};return{login:i,register:a,hasActiveSession:c}}]),angular.module("org.privatechat.user.UserService",[]).factory("UserService",["$http",function(e){var t="USER_INFO",n=function(){return e({method:"GET",url:"/api/user/requesting/friendslist",headers:{"Content-Type":"application/json"}})},r=function(){return e({method:"GET",url:"/api/user/requesting/info"}).then(function(e){e&&e.data&&$.cookie(t,JSON.stringify({id:parseInt(e.data.id,10),fullName:e.data.fullName,email:e.data.email}))})},o=function(){$.removeCookie(t)},i=function(){var e=$.cookie(t);return e?JSON.parse($.cookie(t)):null};return{getFriendslist:n,getUserInfo:i,establishUserInfo:r,clearUserInfo:o}}]),angular.module("org.privatechat.shared.theme.Navbar",["org.privatechat.user.AuthService","org.privatechat.user.notification.NotificationDirective"]).directive("navbar",function(){return{restrict:"E",templateUrl:"shared/theme/NavbarView.html",controller:["$scope","$rootScope","AuthService",function(e,t,n){var r=e;r.hasActiveSession=!1,r.construct=function(){r.hasActiveSession=n.hasActiveSession()},r.logout=function(){t.$broadcast("logout-event")},r.construct()}]}}),angular.module("org.privatechat.shared.websocket.WebSocket",[]).factory("WebSocket",[function(){var e,t=1e3,n=function(){e=Stomp.over(new SockJS("/ws")),e.debug=null,e.connect({},o,i)},r=function(){e.disconnect(),e=null},o=function(){},i=function(){alert('You have disconnected, hit "OK" to reload.'),window.location.reload()},s=function(){return e&&e.connected},a=function(e){setTimeout(function(){return s()?void(null!==e&&e()):void a(e)},t)};return{get:function(){return e},connect:n,disconnect:r,isConnected:s,whenConnected:a}}]),angular.module("org.privatechat.user.notification.NotificationController",["org.privatechat.user.AuthService","org.privatechat.shared.websocket.WebSocket","org.privatechat.user.UserService","org.privatechat.user.notification.NotificationService"]).controller("NotificationController",["$scope","AuthService","WebSocket","$location","UserService","NotificationService",function(e,t,n,r,o,i){var s,a=e;a.construct=function(){c()};var c=function(){s=n.get(),s.subscribe("/topic/user.notification."+o.getUserInfo().id,l),a.notifications=i.notifications},u={ChatMessageNotification:{onMessage:function(e){var t="/private-chat/"+e.fromUserId,n=_.any(i.notifications,{fromUserId:e.fromUserId,type:"ChatMessageNotification"});r.path()===t||n||(e.path=t,i.notifications.push(e),a.$apply())},onAcknowledgement:function(e){var t=i.notifications.indexOf(e);i.notifications.splice(t,1),r.path(e.path)}}},l=function(e){var t=JSON.parse(e.body);u[t.type].onMessage(t)};a.acknowledgeNotification=function(e){u[e.type].onAcknowledgement(e)},n.whenConnected(a.construct)}]),angular.module("org.privatechat.user.notification.NotificationDirective",["org.privatechat.user.notification.NotificationController"]).directive("notifications",function(){return{restrict:"E",templateUrl:"user/notification/NotificationView.html",controller:"NotificationController"}}),angular.module("org.privatechat.user.notification.NotificationService",[]).factory("NotificationService",[function(){var e=[];return{notifications:e}}]),!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.SockJS=e()}}(function(){var e;return function t(e,n,r){function o(s,a){if(!n[s]){if(!e[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[s]={exports:{}};e[s][0].call(l.exports,function(t){var n=e[s][1][t];return o(n?n:t)},l,l.exports,t,e,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,t){(function(n){"use strict";var r=e("./transport-list");t.exports=e("./main")(r),"_sockjs_onload"in n&&setTimeout(n._sockjs_onload,1)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(e,t){"use strict";function n(){o.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}var r=e("inherits"),o=e("./event");r(n,o),t.exports=n},{"./event":4,inherits:57}],3:[function(e,t){"use strict";function n(){o.call(this)}var r=e("inherits"),o=e("./eventtarget");r(n,o),n.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},n.prototype.once=function(e,t){function n(){r.removeListener(e,n),o||(o=!0,t.apply(this,arguments))}var r=this,o=!1;this.on(e,n)},n.prototype.emit=function(e){var t=this._listeners[e];if(t)for(var n=Array.prototype.slice.call(arguments,1),r=0;r<t.length;r++)t[r].apply(this,n)},n.prototype.on=n.prototype.addListener=o.prototype.addEventListener,n.prototype.removeListener=o.prototype.removeEventListener,t.exports.EventEmitter=n},{"./eventtarget":5,inherits:57}],4:[function(e,t){"use strict";function n(e){this.type=e}n.prototype.initEvent=function(e,t,n){return this.type=e,this.bubbles=t,this.cancelable=n,this.timeStamp=+new Date,this},n.prototype.stopPropagation=function(){},n.prototype.preventDefault=function(){},n.CAPTURING_PHASE=1,n.AT_TARGET=2,n.BUBBLING_PHASE=3,t.exports=n},{}],5:[function(e,t){"use strict";function n(){this._listeners={}}n.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var n=this._listeners[e];-1===n.indexOf(t)&&(n=n.concat([t])),this._listeners[e]=n},n.prototype.removeEventListener=function(e,t){var n=this._listeners[e];if(n){var r=n.indexOf(t);return-1!==r?void(n.length>1?this._listeners[e]=n.slice(0,r).concat(n.slice(r+1)):delete this._listeners[e]):void 0}},n.prototype.dispatchEvent=function(e){var t=e.type,n=Array.prototype.slice.call(arguments,0);if(this["on"+t]&&this["on"+t].apply(this,n),t in this._listeners)for(var r=this._listeners[t],o=0;o<r.length;o++)r[o].apply(this,n)},t.exports=n},{}],6:[function(e,t){"use strict";function n(e){o.call(this),this.initEvent("message",!1,!1),this.data=e}var r=e("inherits"),o=e("./event");r(n,o),t.exports=n},{"./event":4,inherits:57}],7:[function(e,t){"use strict";function n(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}var r=e("json3"),o=e("./utils/iframe");n.prototype._transportClose=function(e,t){o.postMessage("c",r.stringify([e,t]))},n.prototype._transportMessage=function(e){o.postMessage("t",e)},n.prototype._send=function(e){this._transport.send(e)},n.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=n},{"./utils/iframe":47,json3:58}],8:[function(e,t){(function(n){"use strict";var r=e("./utils/url"),o=e("./utils/event"),i=e("json3"),s=e("./facade"),a=e("./info-iframe-receiver"),c=e("./utils/iframe"),u=e("./location"),l=function(){};"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:iframe-bootstrap")),t.exports=function(e,t){var n={};t.forEach(function(e){e.facadeTransport&&(n[e.facadeTransport.transportName]=e.facadeTransport)}),n[a.transportName]=a;var f;e.bootstrap_iframe=function(){var t;c.currentWindowId=u.hash.slice(1);var a=function(o){if(o.source===parent&&("undefined"==typeof f&&(f=o.origin),o.origin===f)){var a;try{a=i.parse(o.data)}catch(h){return void l("bad json",o.data)}if(a.windowId===c.currentWindowId)switch(a.type){case"s":var d;try{d=i.parse(a.data)}catch(h){l("bad json",a.data);break}var p=d[0],v=d[1],m=d[2],g=d[3];if(l(p,v,m,g),p!==e.version)throw new Error('Incompatibile SockJS! Main site uses: "'+p+'", the iframe: "'+e.version+'".');if(!r.isOriginEqual(m,u.href)||!r.isOriginEqual(g,u.href))throw new Error("Can't connect to different domain from within an iframe. ("+u.href+", "+m+", "+g+")");t=new s(new n[v](m,g));break;case"m":t._send(a.data);break;case"c":t&&t._close(),t=null}}};o.attachEvent("message",a),c.postMessage("s")}}}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:54,json3:58}],9:[function(e,t){(function(n){"use strict";function r(e,t){o.call(this);var n=this,r=+new Date;this.xo=new t("GET",e),this.xo.once("finish",function(e,t){var o,i;if(200===e){if(i=+new Date-r,t)try{o=s.parse(t)}catch(u){c("bad json",t)}a.isObject(o)||(o={})}n.emit("finish",o,i),n.removeAllListeners()})}var o=e("events").EventEmitter,i=e("inherits"),s=e("json3"),a=e("./utils/object"),c=function(){};"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:info-ajax")),i(r,o),r.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=r}).call(this,{env:{}})},{"./utils/object":49,debug:54,events:3,inherits:57,json3:58}],10:[function(e,t){"use strict";function n(e){var t=this;o.call(this),this.ir=new a(e,s),this.ir.once("finish",function(e,n){t.ir=null,t.emit("message",i.stringify([e,n]))})}var r=e("inherits"),o=e("events").EventEmitter,i=e("json3"),s=e("./transport/sender/xhr-local"),a=e("./info-ajax");r(n,o),n.transportName="iframe-info-receiver",n.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=n},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57,json3:58}],11:[function(e,t){(function(n,r){"use strict";function o(e,t){var n=this;i.call(this);var o=function(){var r=n.ifr=new u(l.transportName,t,e);r.once("message",function(e){if(e){var t;try{t=a.parse(e)}catch(r){return f("bad json",e),n.emit("finish"),void n.close()}var o=t[0],i=t[1];n.emit("finish",o,i)}n.close()}),r.once("close",function(){n.emit("finish"),n.close()})};r.document.body?o():c.attachEvent("load",o)}var i=e("events").EventEmitter,s=e("inherits"),a=e("json3"),c=e("./utils/event"),u=e("./transport/iframe"),l=e("./info-iframe-receiver"),f=function(){};"production"!==n.env.NODE_ENV&&(f=e("debug")("sockjs-client:info-iframe")),s(o,i),o.enabled=function(){return u.enabled()},o.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},t.exports=o}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:54,events:3,inherits:57,json3:58}],12:[function(e,t){(function(n){"use strict";function r(e,t){d(e);var n=this;o.call(this),setTimeout(function(){n.doXhr(e,t)},0)}var o=e("events").EventEmitter,i=e("inherits"),s=e("./utils/url"),a=e("./transport/sender/xdr"),c=e("./transport/sender/xhr-cors"),u=e("./transport/sender/xhr-local"),l=e("./transport/sender/xhr-fake"),f=e("./info-iframe"),h=e("./info-ajax"),d=function(){};"production"!==n.env.NODE_ENV&&(d=e("debug")("sockjs-client:info-receiver")),i(r,o),r._getReceiver=function(e,t,n){return n.sameOrigin?new h(t,u):c.enabled?new h(t,c):a.enabled&&n.sameScheme?new h(t,a):f.enabled()?new f(e,t):new h(t,l)},r.prototype.doXhr=function(e,t){var n=this,o=s.addPath(e,"/info");d("doXhr",o),this.xo=r._getReceiver(e,o,t),this.timeoutRef=setTimeout(function(){d("timeout"),n._cleanup(!1),n.emit("finish")},r.timeout),this.xo.once("finish",function(e,t){d("finish",e,t),n._cleanup(!0),n.emit("finish",e,t)})},r.prototype._cleanup=function(e){d("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},r.prototype.close=function(){d("close"),this.removeAllListeners(),this._cleanup(!1)},r.timeout=8e3,t.exports=r}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:54,events:3,inherits:57}],13:[function(e,t){(function(e){"use strict";t.exports=e.location||{origin:"http://localhost:80",protocol:"http",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(e,t){(function(n,r){"use strict";function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");b.call(this),this.readyState=o.CONNECTING,this.extensions="",this.protocol="",n=n||{},n.protocols_whitelist&&m.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=n.transports;var r=n.sessionId||8;if("function"==typeof r)this._generateSessionId=r;else{if("number"!=typeof r)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return u.string(r)}}this._server=n.server||u.numberString(1e3);var i=new s(e);if(!i.host||!i.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(i.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==i.protocol&&"https:"!==i.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+i.protocol+"' is not allowed.");var a="https:"===i.protocol;if("https"===y.protocol&&!a)throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var c=t.sort();c.forEach(function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<c.length-1&&e===c[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")});var l=f.getOrigin(y.href);this._origin=l?l.toLowerCase():null,i.set("pathname",i.pathname.replace(/\/+$/,"")),this.url=i.href,E("using url",this.url),this._urlInfo={nullOrigin:!v.hasDomain(),sameOrigin:f.isOriginEqual(this.url,y.href),sameScheme:f.isSchemeEqual(this.url,y.href)},this._ir=new _(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function i(e){return 1e3===e||e>=3e3&&4999>=e}e("./shims");var s=e("url-parse"),a=e("inherits"),c=e("json3"),u=e("./utils/random"),l=e("./utils/escape"),f=e("./utils/url"),h=e("./utils/event"),d=e("./utils/transport"),p=e("./utils/object"),v=e("./utils/browser"),m=e("./utils/log"),g=e("./event/event"),b=e("./event/eventtarget"),y=e("./location"),w=e("./event/close"),x=e("./event/trans-message"),_=e("./info-receiver"),E=function(){};"production"!==n.env.NODE_ENV&&(r.dbg=e("debug"),E=r.dbg("sockjs-client:main"));var S;a(o,b),o.prototype.close=function(e,t){if(e&&!i(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==o.CLOSING&&this.readyState!==o.CLOSED){var n=!0;this._close(e||1e3,t||"Normal closure",n)}},o.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===o.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===o.OPEN&&this._transport.send(l.quote(e))},o.version=e("./version"),o.CONNECTING=0,o.OPEN=1,o.CLOSING=2,o.CLOSED=3,o.prototype._receiveInfo=function(e,t){if(E("_receiveInfo",t),this._ir=null,!e)return void this._close(1002,"Cannot connect to server");this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=p.extend(e,this._urlInfo),E("info",e);var n=S.filterToEnabled(this._transportsWhitelist,e);this._transports=n.main,E(this._transports.length+" enabled transports"),this._connect()},o.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(E("attempt",e.transportName),e.needBody&&(!r.document.body||"undefined"!=typeof r.document.readyState&&"complete"!==r.document.readyState&&"interactive"!==r.document.readyState))return E("waiting for body"),this._transports.unshift(e),void h.attachEvent("load",this._connect.bind(this));var t=this._rto*e.roundTrips||5e3;this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),t),E("using timeout",t);var n=f.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId());E("transport url",n);var o=new e(n,this._transUrl);return o.on("message",this._transportMessage.bind(this)),o.once("close",this._transportClose.bind(this)),o.transportName=e.transportName,void(this._transport=o)}this._close(2e3,"All transports failed",!1)},o.prototype._transportTimeout=function(){E("_transportTimeout"),this.readyState===o.CONNECTING&&this._transportClose(2007,"Transport timed out")},o.prototype._transportMessage=function(e){E("_transportMessage",e);var t,n=this,r=e.slice(0,1),o=e.slice(1);switch(r){case"o":return void this._open();case"h":return this.dispatchEvent(new g("heartbeat")),void E("heartbeat",this.transport)}if(o)try{t=c.parse(o)}catch(i){E("bad json",o)}if("undefined"==typeof t)return void E("empty payload",o);switch(r){case"a":Array.isArray(t)&&t.forEach(function(e){E("message",n.transport,e),n.dispatchEvent(new x(e))});break;case"m":E("message",this.transport,t),this.dispatchEvent(new x(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}},o.prototype._transportClose=function(e,t){return E("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),i(e)||2e3===e||this.readyState!==o.CONNECTING?void this._close(e,t):void this._connect()},o.prototype._open=function(){E("_open",this._transport.transportName,this.readyState),this.readyState===o.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=o.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new g("open")),E("connected",this.transport)):this._close(1006,"Server lost session")},o.prototype._close=function(e,t,n){E("_close",this.transport,e,t,n,this.readyState);var r=!1;if(this._ir&&(r=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===o.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=o.CLOSING,setTimeout(function(){this.readyState=o.CLOSED,r&&this.dispatchEvent(new g("error"));var i=new w("close");i.wasClean=n||!1,i.code=e||1e3,i.reason=t,this.dispatchEvent(i),this.onmessage=this.onclose=this.onerror=null,E("disconnected")}.bind(this),0)},o.prototype.countRTO=function(e){return e>100?4*e:300+e},t.exports=function(t){return S=d(t),e("./iframe-bootstrap")(o,t),o}}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:54,inherits:57,json3:58,"url-parse":59}],15:[function(){"use strict";function e(e){var t=+e;return t!==t?t=0:0!==t&&t!==1/0&&t!==-(1/0)&&(t=(t>0||-1)*Math.floor(Math.abs(t))),t}function t(e){return e>>>0}function n(){}var r,o=Array.prototype,i=Object.prototype,s=Function.prototype,a=String.prototype,c=o.slice,u=i.toString,l=function(e){return"[object Function]"===i.toString.call(e)},f=function(e){return"[object Array]"===u.call(e)},h=function(e){return"[object String]"===u.call(e)},d=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();r=d?function(e,t,n,r){!r&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:n})}:function(e,t,n,r){!r&&t in e||(e[t]=n)};var p=function(e,t,n){for(var o in t)i.hasOwnProperty.call(t,o)&&r(e,o,t[o],n)},v=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};p(s,{bind:function(e){var t=this;if(!l(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var r=c.call(arguments,1),o=function(){if(this instanceof u){var n=t.apply(this,r.concat(c.call(arguments)));return Object(n)===n?n:this}return t.apply(e,r.concat(c.call(arguments)))},i=Math.max(0,t.length-r.length),s=[],a=0;i>a;a++)s.push("$"+a);var u=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this, arguments); }")(o);return t.prototype&&(n.prototype=t.prototype,u.prototype=new n,n.prototype=null),u}}),p(Array,{isArray:f});var m=Object("a"),g="a"!==m[0]||!(0 in m),b=function(e){var t=!0,n=!0;return e&&(e.call("foo",function(e,n,r){"object"!=typeof r&&(t=!1)}),e.call([1],function(){n="string"==typeof this},"x")),!!e&&t&&n};p(o,{forEach:function(e){var t=v(this),n=g&&h(this)?this.split(""):t,r=arguments[1],o=-1,i=n.length>>>0;if(!l(e))throw new TypeError;for(;++o<i;)o in n&&e.call(r,n[o],o,t)}},!b(o.forEach));var y=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);p(o,{indexOf:function(t){var n=g&&h(this)?this.split(""):v(this),r=n.length>>>0;if(!r)return-1;var o=0;for(arguments.length>1&&(o=e(arguments[1])),o=o>=0?o:Math.max(0,r+o);r>o;o++)if(o in n&&n[o]===t)return o;return-1}},y);var w=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?!function(){var e=void 0===/()??/.exec("")[1];a.split=function(n,r){var i=this;if(void 0===n&&0===r)return[];if("[object RegExp]"!==u.call(n))return w.call(this,n,r);var s,a,c,l,f=[],h=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.extended?"x":"")+(n.sticky?"y":""),d=0;for(n=new RegExp(n.source,h+"g"),i+="",e||(s=new RegExp("^"+n.source+"$(?!\\s)",h)),r=void 0===r?-1>>>0:t(r);(a=n.exec(i))&&(c=a.index+a[0].length,!(c>d&&(f.push(i.slice(d,a.index)),!e&&a.length>1&&a[0].replace(s,function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(a[e]=void 0)}),a.length>1&&a.index<i.length&&o.push.apply(f,a.slice(1)),l=a[0].length,d=c,f.length>=r)));)n.lastIndex===a.index&&n.lastIndex++;return d===i.length?(l||!n.test(""))&&f.push(""):f.push(i.slice(d)),f.length>r?f.slice(0,r):f}}():"0".split(void 0,0).length&&(a.split=function(e,t){return void 0===e&&0===t?[]:w.call(this,e,t)});var x="	\n\f\r   ᠎             　\u2028\u2029﻿",_="​",E="["+x+"]",S=new RegExp("^"+E+E+"*"),C=new RegExp(E+E+"*$"),N=a.trim&&(x.trim()||!_.trim());p(a,{trim:function(){if(void 0===this||null===this)throw new TypeError("can't convert "+this+" to object");return String(this).replace(S,"").replace(C,"")}},N);var j=a.substr,O="".substr&&"b"!=="0b".substr(-1);p(a,{substr:function(e,t){return j.call(this,0>e&&(e=this.length+e)<0?0:e,t)}},O)},{}],16:[function(e,t){"use strict";t.exports=[e("./transport/websocket"),e("./transport/xhr-streaming"),e("./transport/xdr-streaming"),e("./transport/eventsource"),e("./transport/lib/iframe-wrap")(e("./transport/eventsource")),e("./transport/htmlfile"),e("./transport/lib/iframe-wrap")(e("./transport/htmlfile")),e("./transport/xhr-polling"),e("./transport/xdr-polling"),e("./transport/lib/iframe-wrap")(e("./transport/xhr-polling")),e("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(e,t){(function(n,r){"use strict";function o(e,t,n,r){l(e,t);var o=this;i.call(this),setTimeout(function(){o._start(e,t,n,r)},0)}var i=e("events").EventEmitter,s=e("inherits"),a=e("../../utils/event"),c=e("../../utils/url"),u=r.XMLHttpRequest,l=function(){};"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:browser:xhr")),s(o,i),o.prototype._start=function(e,t,n,r){var i=this;try{this.xhr=new u}catch(s){}if(!this.xhr)return l("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=c.addQuery(t,"t="+ +new Date),this.unloadRef=a.unloadAdd(function(){l("unload cleanup"),i._cleanup(!0)});try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){l("xhr timeout"),i.emit("finish",0,""),i._cleanup(!1)})}catch(f){return l("exception",f),this.emit("finish",0,""),void this._cleanup(!1)}if(r&&r.noCredentials||!o.supportsCORS||(l("withCredentials"),this.xhr.withCredentials="true"),r&&r.headers)for(var h in r.headers)this.xhr.setRequestHeader(h,r.headers[h]);this.xhr.onreadystatechange=function(){if(i.xhr){var e,t,n=i.xhr;switch(l("readyState",n.readyState),n.readyState){case 3:try{t=n.status,e=n.responseText}catch(r){}l("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(l("chunk"),i.emit("chunk",t,e));break;case 4:t=n.status,l("status",t),1223===t&&(t=204),(12005===t||12029===t)&&(t=0),l("finish",t,n.responseText),i.emit("finish",t,n.responseText),i._cleanup(!1)}}};try{i.xhr.send(n)}catch(f){i.emit("finish",0,""),i._cleanup(!1)}},o.prototype._cleanup=function(e){if(l("cleanup"),this.xhr){if(this.removeAllListeners(),a.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(t){}this.unloadRef=this.xhr=null}},o.prototype.close=function(){l("close"),this._cleanup(!0)},o.enabled=!!u;var f=["Active"].concat("Object").join("X");!o.enabled&&f in r&&(l("overriding xmlhttprequest"),u=function(){try{return new r[f]("Microsoft.XMLHTTP")}catch(e){return null}},o.enabled=!!new u);var h=!1;try{h="withCredentials"in new u}catch(d){}o.supportsCORS=h,t.exports=o}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:54,events:3,inherits:57}],18:[function(e,t){(function(e){t.exports=e.EventSource}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(e,t){(function(e){t.exports=e.WebSocket||e.MozWebSocket}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(e,t){"use strict";function n(e){if(!n.enabled())throw new Error("Transport created when disabled");o.call(this,e,"/eventsource",i,s)}var r=e("inherits"),o=e("./lib/ajax-based"),i=e("./receiver/eventsource"),s=e("./sender/xhr-cors"),a=e("eventsource");r(n,o),n.enabled=function(){return!!a},n.transportName="eventsource",n.roundTrips=2,t.exports=n},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(e,t){"use strict";function n(e){if(!o.enabled)throw new Error("Transport created when disabled");
s.call(this,e,"/htmlfile",o,i)}var r=e("inherits"),o=e("./receiver/htmlfile"),i=e("./sender/xhr-local"),s=e("./lib/ajax-based");r(n,s),n.enabled=function(e){return o.enabled&&e.sameOrigin},n.transportName="htmlfile",n.roundTrips=2,t.exports=n},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(e,t){(function(n){"use strict";function r(e,t,n){if(!r.enabled())throw new Error("Transport created when disabled");s.call(this);var o=this;this.origin=c.getOrigin(n),this.baseUrl=n,this.transUrl=t,this.transport=e,this.windowId=f.string(8);var i=c.addPath(n,"/iframe.html")+"#"+this.windowId;h(e,t,i),this.iframeObj=u.createIframe(i,function(e){h("err callback"),o.emit("close",1006,"Unable to load an iframe ("+e+")"),o.close()}),this.onmessageCallback=this._message.bind(this),l.attachEvent("message",this.onmessageCallback)}var o=e("inherits"),i=e("json3"),s=e("events").EventEmitter,a=e("../version"),c=e("../utils/url"),u=e("../utils/iframe"),l=e("../utils/event"),f=e("../utils/random"),h=function(){};"production"!==n.env.NODE_ENV&&(h=e("debug")("sockjs-client:transport:iframe")),o(r,s),r.prototype.close=function(){if(h("close"),this.removeAllListeners(),this.iframeObj){l.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},r.prototype._message=function(e){if(h("message",e.data),!c.isOriginEqual(e.origin,this.origin))return void h("not same origin",e.origin,this.origin);var t;try{t=i.parse(e.data)}catch(n){return void h("bad json",e.data)}if(t.windowId!==this.windowId)return void h("mismatched window id",t.windowId,this.windowId);switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",i.stringify([a,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var r;try{r=i.parse(t.data)}catch(n){return void h("bad json",t.data)}this.emit("close",r[0],r[1]),this.close()}},r.prototype.postMessage=function(e,t){h("postMessage",e,t),this.iframeObj.post(i.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},r.prototype.send=function(e){h("send",e),this.postMessage("m",e)},r.enabled=function(){return u.iframeEnabled},r.transportName="iframe",r.roundTrips=2,t.exports=r}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:54,events:3,inherits:57,json3:58}],23:[function(e,t){(function(n){"use strict";function r(e){if(!r.enabled())throw new Error("Transport created when disabled");i.call(this,e,"/jsonp",a,s)}var o=e("inherits"),i=e("./lib/sender-receiver"),s=e("./receiver/jsonp"),a=e("./sender/jsonp");o(r,i),r.enabled=function(){return!!n.document},r.transportName="jsonp-polling",r.roundTrips=1,r.needBody=!0,t.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(e,t){(function(n){"use strict";function r(e){return function(t,n,r){c("create ajax sender",t,n);var o={};"string"==typeof n&&(o.headers={"Content-type":"text/plain"});var i=s.addPath(t,"/xhr_send"),a=new e("POST",i,n,o);return a.once("finish",function(e){return c("finish",e),a=null,200!==e&&204!==e?r(new Error("http status "+e)):void r()}),function(){c("abort"),a.close(),a=null;var e=new Error("Aborted");e.code=1e3,r(e)}}}function o(e,t,n,o){a.call(this,e,t,r(o),n,o)}var i=e("inherits"),s=e("../../utils/url"),a=e("./sender-receiver"),c=function(){};"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:ajax-based")),i(o,a),t.exports=o}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:54,inherits:57}],25:[function(e,t){(function(n){"use strict";function r(e,t){s(e),i.call(this),this.sendBuffer=[],this.sender=t,this.url=e}var o=e("inherits"),i=e("events").EventEmitter,s=function(){};"production"!==n.env.NODE_ENV&&(s=e("debug")("sockjs-client:buffered-sender")),o(r,i),r.prototype.send=function(e){s("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},r.prototype.sendScheduleWait=function(){s("sendScheduleWait");var e,t=this;this.sendStop=function(){s("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout(function(){s("timeout"),t.sendStop=null,t.sendSchedule()},25)},r.prototype.sendSchedule=function(){s("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,function(t){e.sendStop=null,t?(s("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e._cleanup()):e.sendScheduleWait()}),this.sendBuffer=[]}},r.prototype._cleanup=function(){s("_cleanup"),this.removeAllListeners()},r.prototype.stop=function(){s("stop"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=r}).call(this,{env:{}})},{debug:54,events:3,inherits:57}],26:[function(e,t){(function(n){"use strict";var r=e("inherits"),o=e("../iframe"),i=e("../../utils/object");t.exports=function(e){function t(t,n){o.call(this,e.transportName,t,n)}return r(t,o),t.enabled=function(t,r){if(!n.document)return!1;var s=i.extend({},r);return s.sameOrigin=!0,e.enabled(s)&&o.enabled()},t.transportName="iframe-"+e.transportName,t.needBody=!0,t.roundTrips=o.roundTrips+e.roundTrips-1,t.facadeTransport=e,t}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(e,t){(function(n){"use strict";function r(e,t,n){s(t),i.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=n,this._scheduleReceiver()}var o=e("inherits"),i=e("events").EventEmitter,s=function(){};"production"!==n.env.NODE_ENV&&(s=e("debug")("sockjs-client:polling")),o(r,i),r.prototype._scheduleReceiver=function(){s("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",function(t){s("message",t),e.emit("message",t)}),t.once("close",function(n,r){s("close",n,r,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===r?e._scheduleReceiver():(e.emit("close",n||1006,r),e.removeAllListeners()))})},r.prototype.abort=function(){s("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=r}).call(this,{env:{}})},{debug:54,events:3,inherits:57}],28:[function(e,t){(function(n){"use strict";function r(e,t,n,r,o){var u=i.addPath(e,t);c(u);var l=this;s.call(this,e,n),this.poll=new a(r,u,o),this.poll.on("message",function(e){c("poll message",e),l.emit("message",e)}),this.poll.once("close",function(e,t){c("poll close",e,t),l.poll=null,l.emit("close",e,t),l.close()})}var o=e("inherits"),i=e("../../utils/url"),s=e("./buffered-sender"),a=e("./polling"),c=function(){};"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:sender-receiver")),o(r,s),r.prototype.close=function(){c("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null),this.stop()},t.exports=r}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:54,inherits:57}],29:[function(e,t){(function(n){"use strict";function r(e){a(e),i.call(this);var t=this,n=this.es=new s(e);n.onmessage=function(e){a("message",e.data),t.emit("message",decodeURI(e.data))},n.onerror=function(e){a("error",n.readyState,e);var r=2!==n.readyState?"network":"permanent";t._cleanup(),t._close(r)}}var o=e("inherits"),i=e("events").EventEmitter,s=e("eventsource"),a=function(){};"production"!==n.env.NODE_ENV&&(a=e("debug")("sockjs-client:receiver:eventsource")),o(r,i),r.prototype.abort=function(){a("abort"),this._cleanup(),this._close("user")},r.prototype._cleanup=function(){a("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},r.prototype._close=function(e){a("close",e);var t=this;setTimeout(function(){t.emit("close",null,e),t.removeAllListeners()},200)},t.exports=r}).call(this,{env:{}})},{debug:54,events:3,eventsource:18,inherits:57}],30:[function(e,t){(function(n,r){"use strict";function o(e){l(e),c.call(this);var t=this;s.polluteGlobalNamespace(),this.id="a"+u.string(6),e=a.addQuery(e,"c="+decodeURIComponent(s.WPrefix+"."+this.id)),l("using htmlfile",o.htmlfileEnabled);var n=o.htmlfileEnabled?s.createHtmlfile:s.createIframe;r[s.WPrefix][this.id]={start:function(){l("start"),t.iframeObj.loaded()},message:function(e){l("message",e),t.emit("message",e)},stop:function(){l("stop"),t._cleanup(),t._close("network")}},this.iframeObj=n(e,function(){l("callback"),t._cleanup(),t._close("permanent")})}var i=e("inherits"),s=e("../../utils/iframe"),a=e("../../utils/url"),c=e("events").EventEmitter,u=e("../../utils/random"),l=function(){};"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:receiver:htmlfile")),i(o,c),o.prototype.abort=function(){l("abort"),this._cleanup(),this._close("user")},o.prototype._cleanup=function(){l("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete r[s.WPrefix][this.id]},o.prototype._close=function(e){l("_close",e),this.emit("close",null,e),this.removeAllListeners()},o.htmlfileEnabled=!1;var f=["Active"].concat("Object").join("X");if(f in r)try{o.htmlfileEnabled=!!new r[f]("htmlfile")}catch(h){}o.enabled=o.htmlfileEnabled||s.iframeEnabled,t.exports=o}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:54,events:3,inherits:57}],31:[function(e,t){(function(n,r){"use strict";function o(e){f(e);var t=this;l.call(this),i.polluteGlobalNamespace(),this.id="a"+s.string(6);var n=c.addQuery(e,"c="+encodeURIComponent(i.WPrefix+"."+this.id));r[i.WPrefix][this.id]=this._callback.bind(this),this._createScript(n),this.timeoutId=setTimeout(function(){f("timeout"),t._abort(new Error("JSONP script loaded abnormally (timeout)"))},o.timeout)}var i=e("../../utils/iframe"),s=e("../../utils/random"),a=e("../../utils/browser"),c=e("../../utils/url"),u=e("inherits"),l=e("events").EventEmitter,f=function(){};"production"!==n.env.NODE_ENV&&(f=e("debug")("sockjs-client:receiver:jsonp")),u(o,l),o.prototype.abort=function(){if(f("abort"),r[i.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},o.timeout=35e3,o.scriptErrorTimeout=1e3,o.prototype._callback=function(e){f("_callback",e),this._cleanup(),this.aborting||(e&&(f("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},o.prototype._abort=function(e){f("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},o.prototype._cleanup=function(){if(f("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete r[i.WPrefix][this.id]},o.prototype._scriptError=function(){f("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout(function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))},o.scriptErrorTimeout))},o.prototype._createScript=function(e){f("_createScript",e);var t,n=this,o=this.script=r.document.createElement("script");if(o.id="a"+s.string(8),o.src=e,o.type="text/javascript",o.charset="UTF-8",o.onerror=this._scriptError.bind(this),o.onload=function(){f("onload"),n._abort(new Error("JSONP script loaded abnormally (onload)"))},o.onreadystatechange=function(){if(f("onreadystatechange",o.readyState),/loaded|closed/.test(o.readyState)){if(o&&o.htmlFor&&o.onclick){n.loadedOkay=!0;try{o.onclick()}catch(e){}}o&&n._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},"undefined"==typeof o.async&&r.document.attachEvent)if(a.isOpera())t=this.script2=r.document.createElement("script"),t.text="try{var a = document.getElementById('"+o.id+"'); if(a)a.onerror();}catch(x){};",o.async=t.async=!1;else{try{o.htmlFor=o.id,o.event="onclick"}catch(i){}o.async=!0}"undefined"!=typeof o.async&&(o.async=!0);var c=r.document.getElementsByTagName("head")[0];c.insertBefore(o,c.firstChild),t&&c.insertBefore(t,c.firstChild)},t.exports=o}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:54,events:3,inherits:57}],32:[function(e,t){(function(n){"use strict";function r(e,t){s(e),i.call(this);var n=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",function(e,t){s("finish",e,t),n._chunkHandler(e,t),n.xo=null;var r=200===e?"network":"permanent";s("close",r),n.emit("close",null,r),n._cleanup()})}var o=e("inherits"),i=e("events").EventEmitter,s=function(){};"production"!==n.env.NODE_ENV&&(s=e("debug")("sockjs-client:receiver:xhr")),o(r,i),r.prototype._chunkHandler=function(e,t){if(s("_chunkHandler",e),200===e&&t)for(var n=-1;;this.bufferPosition+=n+1){var r=t.slice(this.bufferPosition);if(n=r.indexOf("\n"),-1===n)break;var o=r.slice(0,n);o&&(s("message",o),this.emit("message",o))}},r.prototype._cleanup=function(){s("_cleanup"),this.removeAllListeners()},r.prototype.abort=function(){s("abort"),this.xo&&(this.xo.close(),s("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=r}).call(this,{env:{}})},{debug:54,events:3,inherits:57}],33:[function(e,t){(function(n,r){"use strict";function o(e){c("createIframe",e);try{return r.document.createElement('<iframe name="'+e+'">')}catch(t){var n=r.document.createElement("iframe");return n.name=e,n}}function i(){c("createForm"),u=r.document.createElement("form"),u.style.display="none",u.style.position="absolute",u.method="POST",u.enctype="application/x-www-form-urlencoded",u.acceptCharset="UTF-8",l=r.document.createElement("textarea"),l.name="d",u.appendChild(l),r.document.body.appendChild(u)}var s=e("../../utils/random"),a=e("../../utils/url"),c=function(){};"production"!==n.env.NODE_ENV&&(c=e("debug")("sockjs-client:sender:jsonp"));var u,l;t.exports=function(e,t,n){c(e,t),u||i();var r="a"+s.string(8);u.target=r,u.action=a.addQuery(a.addPath(e,"/jsonp_send"),"i="+r);var f=o(r);f.id=r,f.style.display="none",u.appendChild(f);try{l.value=t}catch(h){}u.submit();var d=function(e){c("completed",r,e),f.onerror&&(f.onreadystatechange=f.onerror=f.onload=null,setTimeout(function(){c("cleaning up",r),f.parentNode.removeChild(f),f=null},500),l.value="",n(e))};return f.onerror=function(){c("onerror",r),d()},f.onload=function(){c("onload",r),d()},f.onreadystatechange=function(e){c("onreadystatechange",r,f.readyState,e),"complete"===f.readyState&&d()},function(){c("aborted",r),d(new Error("Aborted"))}}}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:54}],34:[function(e,t){(function(n,r){"use strict";function o(e,t,n){l(e,t);var r=this;i.call(this),setTimeout(function(){r._start(e,t,n)},0)}var i=e("events").EventEmitter,s=e("inherits"),a=e("../../utils/event"),c=e("../../utils/browser"),u=e("../../utils/url"),l=function(){};"production"!==n.env.NODE_ENV&&(l=e("debug")("sockjs-client:sender:xdr")),s(o,i),o.prototype._start=function(e,t,n){l("_start");var o=this,i=new r.XDomainRequest;t=u.addQuery(t,"t="+ +new Date),i.onerror=function(){l("onerror"),o._error()},i.ontimeout=function(){l("ontimeout"),o._error()},i.onprogress=function(){l("progress",i.responseText),o.emit("chunk",200,i.responseText)},i.onload=function(){l("load"),o.emit("finish",200,i.responseText),o._cleanup(!1)},this.xdr=i,this.unloadRef=a.unloadAdd(function(){o._cleanup(!0)});try{this.xdr.open(e,t),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(n)}catch(s){this._error()}},o.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},o.prototype._cleanup=function(e){if(l("cleanup",e),this.xdr){if(this.removeAllListeners(),a.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(t){}this.unloadRef=this.xdr=null}},o.prototype.close=function(){l("close"),this._cleanup(!0)},o.enabled=!(!r.XDomainRequest||!c.hasDomain()),t.exports=o}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:54,events:3,inherits:57}],35:[function(e,t){"use strict";function n(e,t,n,r){o.call(this,e,t,n,r)}var r=e("inherits"),o=e("../driver/xhr");r(n,o),n.enabled=o.enabled&&o.supportsCORS,t.exports=n},{"../driver/xhr":17,inherits:57}],36:[function(e,t){"use strict";function n(){var e=this;r.call(this),this.to=setTimeout(function(){e.emit("finish",200,"{}")},n.timeout)}var r=e("events").EventEmitter,o=e("inherits");o(n,r),n.prototype.close=function(){clearTimeout(this.to)},n.timeout=2e3,t.exports=n},{events:3,inherits:57}],37:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n,{noCredentials:!0})}var r=e("inherits"),o=e("../driver/xhr");r(n,o),n.enabled=o.enabled,t.exports=n},{"../driver/xhr":17,inherits:57}],38:[function(e,t){(function(n){"use strict";function r(e){if(!r.enabled())throw new Error("Transport created when disabled");a.call(this),u("constructor",e);var t=this,n=i.addPath(e,"/websocket");n="https"===n.slice(0,5)?"wss"+n.slice(5):"ws"+n.slice(4),this.url=n,this.ws=new c(this.url),this.ws.onmessage=function(e){u("message event",e.data),t.emit("message",e.data)},this.unloadRef=o.unloadAdd(function(){u("unload"),t.ws.close()}),this.ws.onclose=function(e){u("close event",e.code,e.reason),t.emit("close",e.code,e.reason),t._cleanup()},this.ws.onerror=function(e){u("error event",e),t.emit("close",1006,"WebSocket connection broken"),t._cleanup()}}var o=e("../utils/event"),i=e("../utils/url"),s=e("inherits"),a=e("events").EventEmitter,c=e("./driver/websocket"),u=function(){};"production"!==n.env.NODE_ENV&&(u=e("debug")("sockjs-client:websocket")),s(r,a),r.prototype.send=function(e){var t="["+e+"]";u("send",t),this.ws.send(t)},r.prototype.close=function(){u("close"),this.ws&&this.ws.close(),this._cleanup()},r.prototype._cleanup=function(){u("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),o.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},r.enabled=function(){return u("enabled"),!!c},r.transportName="websocket",r.roundTrips=2,t.exports=r}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:54,events:3,inherits:57}],39:[function(e,t){"use strict";function n(e){if(!a.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr",s,a)}var r=e("inherits"),o=e("./lib/ajax-based"),i=e("./xdr-streaming"),s=e("./receiver/xhr"),a=e("./sender/xdr");r(n,o),n.enabled=i.enabled,n.transportName="xdr-polling",n.roundTrips=2,t.exports=n},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(e,t){"use strict";function n(e){if(!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr_streaming",i,s)}var r=e("inherits"),o=e("./lib/ajax-based"),i=e("./receiver/xhr"),s=e("./sender/xdr");r(n,o),n.enabled=function(e){return e.cookie_needed||e.nullOrigin?!1:s.enabled&&e.sameScheme},n.transportName="xdr-streaming",n.roundTrips=2,t.exports=n},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(e,t){"use strict";function n(e){if(!a.enabled&&!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr",i,s)}var r=e("inherits"),o=e("./lib/ajax-based"),i=e("./receiver/xhr"),s=e("./sender/xhr-cors"),a=e("./sender/xhr-local");r(n,o),n.enabled=function(e){return e.nullOrigin?!1:a.enabled&&e.sameOrigin?!0:s.enabled},n.transportName="xhr-polling",n.roundTrips=2,t.exports=n},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(e,t){(function(n){"use strict";function r(e){if(!c.enabled&&!a.enabled)throw new Error("Transport created when disabled");i.call(this,e,"/xhr_streaming",s,a)}var o=e("inherits"),i=e("./lib/ajax-based"),s=e("./receiver/xhr"),a=e("./sender/xhr-cors"),c=e("./sender/xhr-local"),u=e("../utils/browser");o(r,i),r.enabled=function(e){return e.nullOrigin?!1:u.isOpera()?!1:a.enabled},r.transportName="xhr-streaming",r.roundTrips=2,r.needBody=!!n.document,t.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(e,t){(function(e){"use strict";t.exports.randomBytes=e.crypto&&e.crypto.getRandomValues?function(t){var n=new Uint8Array(t);return e.crypto.getRandomValues(n),n}:function(e){for(var t=new Array(e),n=0;e>n;n++)t[n]=Math.floor(256*Math.random());return t}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(e,t){(function(e){"use strict";t.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(t){return!1}}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(e,t){"use strict";var n,r=e("json3"),o=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,i=function(e){var t,n={},r=[];for(t=0;65536>t;t++)r.push(String.fromCharCode(t));return e.lastIndex=0,r.join("").replace(e,function(e){return n[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""}),e.lastIndex=0,n};t.exports={quote:function(e){var t=r.stringify(e);return o.lastIndex=0,o.test(t)?(n||(n=i(o)),t.replace(o,function(e){return n[e]})):t}}},{json3:58}],46:[function(e,t){(function(n){"use strict";var r=e("./random"),o={},i=!1,s=n.chrome&&n.chrome.app&&n.chrome.app.runtime;t.exports={attachEvent:function(e,t){"undefined"!=typeof n.addEventListener?n.addEventListener(e,t,!1):n.document&&n.attachEvent&&(n.document.attachEvent("on"+e,t),n.attachEvent("on"+e,t))},detachEvent:function(e,t){"undefined"!=typeof n.addEventListener?n.removeEventListener(e,t,!1):n.document&&n.detachEvent&&(n.document.detachEvent("on"+e,t),n.detachEvent("on"+e,t))},unloadAdd:function(e){if(s)return null;var t=r.string(8);return o[t]=e,i&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in o&&delete o[e]},triggerUnloadCallbacks:function(){for(var e in o)o[e](),delete o[e]}};var a=function(){i||(i=!0,t.exports.triggerUnloadCallbacks())};s||t.exports.attachEvent("unload",a)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(e,t){(function(n,r){"use strict";var o=e("./event"),i=e("json3"),s=e("./browser"),a=function(){};"production"!==n.env.NODE_ENV&&(a=e("debug")("sockjs-client:utils:iframe")),t.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){t.exports.WPrefix in r||(r[t.exports.WPrefix]={})},postMessage:function(e,n){r.parent!==r?r.parent.postMessage(i.stringify({windowId:t.exports.currentWindowId,type:e,data:n||""}),"*"):a("Cannot postMessage, no parent window.",e,n)},createIframe:function(e,t){var n,i,s=r.document.createElement("iframe"),c=function(){a("unattach"),clearTimeout(n);try{s.onload=null}catch(e){}s.onerror=null},u=function(){a("cleanup"),s&&(c(),setTimeout(function(){s&&s.parentNode.removeChild(s),s=null},0),o.unloadDel(i))},l=function(e){a("onerror",e),s&&(u(),t(e))},f=function(e,t){a("post",e,t);try{setTimeout(function(){s&&s.contentWindow&&s.contentWindow.postMessage(e,t)},0)}catch(n){}};return s.src=e,s.style.display="none",s.style.position="absolute",s.onerror=function(){l("onerror")},s.onload=function(){a("onload"),clearTimeout(n),n=setTimeout(function(){l("onload timeout")},2e3)},r.document.body.appendChild(s),n=setTimeout(function(){l("timeout")},15e3),i=o.unloadAdd(u),{post:f,cleanup:u,loaded:c}},createHtmlfile:function(e,n){var i,s,c,u=["Active"].concat("Object").join("X"),l=new r[u]("htmlfile"),f=function(){clearTimeout(i),c.onerror=null},h=function(){l&&(f(),o.unloadDel(s),c.parentNode.removeChild(c),c=l=null,CollectGarbage())},d=function(e){a("onerror",e),l&&(h(),n(e))},p=function(e,t){try{setTimeout(function(){c&&c.contentWindow&&c.contentWindow.postMessage(e,t)},0)}catch(n){}};l.open(),l.write('<html><script>document.domain="'+r.document.domain+'";</script></html>'),l.close(),l.parentWindow[t.exports.WPrefix]=r[t.exports.WPrefix];var v=l.createElement("div");return l.body.appendChild(v),c=l.createElement("iframe"),v.appendChild(c),c.src=e,c.onerror=function(){d("onerror")},i=setTimeout(function(){d("timeout")},15e3),s=o.unloadAdd(h),{post:p,cleanup:h,loaded:f}}},t.exports.iframeEnabled=!1,r.document&&(t.exports.iframeEnabled=("function"==typeof r.postMessage||"object"==typeof r.postMessage)&&!s.isKonqueror())}).call(this,{env:{}},"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:54,json3:58}],48:[function(e,t){(function(e){"use strict";var n={};["log","debug","warn"].forEach(function(t){var r=e.console&&e.console[t]&&e.console[t].apply;n[t]=r?function(){return e.console[t].apply(e.console,arguments)}:"log"===t?function(){}:n.log}),t.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(e,t){"use strict";t.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,n,r=1,o=arguments.length;o>r;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}}},{}],50:[function(e,t){"use strict";var n=e("crypto"),r="abcdefghijklmnopqrstuvwxyz012345";t.exports={string:function(e){for(var t=r.length,o=n.randomBytes(e),i=[],s=0;e>s;s++)i.push(r.substr(o[s]%t,1));return i.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length,n=new Array(t+1).join("0");return(n+this.number(e)).slice(-t)}}},{crypto:43}],51:[function(e,t){(function(n){"use strict";var r=function(){};"production"!==n.env.NODE_ENV&&(r=e("debug")("sockjs-client:utils:transport")),t.exports=function(e){return{filterToEnabled:function(t,n){var o={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach(function(e){return e?"websocket"===e.transportName&&n.websocket===!1?void r("disabled from server","websocket"):t.length&&-1===t.indexOf(e.transportName)?void r("not in whitelist",e.transportName):void(e.enabled(n)?(r("enabled",e.transportName),o.main.push(e),e.facadeTransport&&o.facade.push(e.facadeTransport)):r("disabled",e.transportName)):void 0}),o}}}}).call(this,{env:{}})},{debug:54}],52:[function(e,t){(function(n){"use strict";var r=e("url-parse"),o=function(){};"production"!==n.env.NODE_ENV&&(o=e("debug")("sockjs-client:utils:url")),t.exports={getOrigin:function(e){if(!e)return null;var t=new r(e);if("file:"===t.protocol)return null;var n=t.port;return n||(n="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+n},isOriginEqual:function(e,t){var n=this.getOrigin(e)===this.getOrigin(t);return o("same",e,t,n),n},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var n=e.split("?");return n[0]+t+(n[1]?"?"+n[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)}}}).call(this,{env:{}})},{debug:54,"url-parse":59}],53:[function(e,t){t.exports="1.0.3"},{}],54:[function(e,t,n){function r(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function o(){var e=arguments,t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+n.humanize(this.diff),!t)return e;var r="color: "+this.color;e=[e[0],r,"color: inherit"].concat(Array.prototype.slice.call(e,1));var o=0,i=0;return e[0].replace(/%[a-z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r),e}function i(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function s(e){try{null==e?u.removeItem("debug"):u.debug=e}catch(t){}}function a(){var e;try{e=u.debug}catch(t){}return e}function c(){try{return window.localStorage}catch(e){}}n=t.exports=e("./debug"),n.log=i,n.formatArgs=o,n.save=s,n.load=a,n.useColors=r;var u;u="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:c(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){return JSON.stringify(e)},n.enable(a())},{"./debug":55}],55:[function(e,t,n){function r(){return n.colors[l++%n.colors.length]}function o(e){function t(){}function o(){var e=o,t=+new Date,i=t-(u||t);e.diff=i,e.prev=u,e.curr=t,u=t,null==e.useColors&&(e.useColors=n.useColors()),null==e.color&&e.useColors&&(e.color=r());var s=Array.prototype.slice.call(arguments);s[0]=n.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var a=0;s[0]=s[0].replace(/%([a-z%])/g,function(t,r){if("%%"===t)return t;a++;var o=n.formatters[r];if("function"==typeof o){var i=s[a];t=o.call(e,i),s.splice(a,1),a--}return t}),"function"==typeof n.formatArgs&&(s=n.formatArgs.apply(e,s));var c=o.log||n.log||console.log.bind(console);c.apply(e,s)}t.enabled=!1,o.enabled=!0;var i=n.enabled(e)?o:t;return i.namespace=e,i}function i(e){n.save(e);for(var t=(e||"").split(/[\s,]+/),r=t.length,o=0;r>o;o++)t[o]&&(e=t[o].replace(/\*/g,".*?"),"-"===e[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")))}function s(){n.enable("")}function a(e){var t,r;for(t=0,r=n.skips.length;r>t;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;r>t;t++)if(n.names[t].test(e))return!0;return!1}function c(e){return e instanceof Error?e.stack||e.message:e}n=t.exports=o,n.coerce=c,n.disable=s,n.enable=i,n.enabled=a,n.humanize=e("ms"),n.names=[],n.skips=[],n.formatters={};var u,l=0},{ms:56}],56:[function(e,t){function n(e){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]),r=(t[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return n*l;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"hrs":case"hr":case"h":return n*c;
case"minutes":case"minute":case"mins":case"min":case"m":return n*a;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n}}}function r(e){return e>=u?Math.round(e/u)+"d":e>=c?Math.round(e/c)+"h":e>=a?Math.round(e/a)+"m":e>=s?Math.round(e/s)+"s":e+"ms"}function o(e){return i(e,u,"day")||i(e,c,"hour")||i(e,a,"minute")||i(e,s,"second")||e+" ms"}function i(e,t,n){return t>e?void 0:1.5*t>e?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,l=365.25*u;t.exports=function(e,t){return t=t||{},"string"==typeof e?n(e):t["long"]?o(e):r(e)}},{}],57:[function(e,t){t.exports="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},{}],58:[function(t,n,r){(function(t){(function(){function o(e,t){function n(e){if(n[e]!==m)return n[e];var o;if("bug-string-char-index"==e)o="a"!="a"[0];else if("json"==e)o=n("json-stringify")&&n("json-parse");else{var s,a='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var c=t.stringify,l="function"==typeof c&&y;if(l){(s=function(){return 1}).toJSON=s;try{l="0"===c(0)&&"0"===c(new r)&&'""'==c(new i)&&c(b)===m&&c(m)===m&&c()===m&&"1"===c(s)&&"[1]"==c([s])&&"[null]"==c([m])&&"null"==c(null)&&"[null,null,null]"==c([m,b,null])&&c({a:[s,!0,!1,null,"\x00\b\n\f\r	"]})==a&&"1"===c(null,s)&&"[\n 1,\n 2\n]"==c([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==c(new u(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==c(new u(864e13))&&'"-000001-01-01T00:00:00.000Z"'==c(new u(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==c(new u(-1))}catch(f){l=!1}}o=l}if("json-parse"==e){var h=t.parse;if("function"==typeof h)try{if(0===h("0")&&!h(!1)){s=h(a);var d=5==s.a.length&&1===s.a[0];if(d){try{d=!h('"	"')}catch(f){}if(d)try{d=1!==h("01")}catch(f){}if(d)try{d=1!==h("1.")}catch(f){}}}}catch(f){d=!1}o=d}}return n[e]=!!o}e||(e=c.Object()),t||(t=c.Object());var r=e.Number||c.Number,i=e.String||c.String,a=e.Object||c.Object,u=e.Date||c.Date,l=e.SyntaxError||c.SyntaxError,f=e.TypeError||c.TypeError,h=e.Math||c.Math,d=e.JSON||c.JSON;"object"==typeof d&&d&&(t.stringify=d.stringify,t.parse=d.parse);var p,v,m,g=a.prototype,b=g.toString,y=new u(-0xc782b5b800cec);try{y=-109252==y.getUTCFullYear()&&0===y.getUTCMonth()&&1===y.getUTCDate()&&10==y.getUTCHours()&&37==y.getUTCMinutes()&&6==y.getUTCSeconds()&&708==y.getUTCMilliseconds()}catch(w){}if(!n("json")){var x="[object Function]",_="[object Date]",E="[object Number]",S="[object String]",C="[object Array]",N="[object Boolean]",j=n("bug-string-char-index");if(!y)var O=h.floor,T=[0,31,59,90,120,151,181,212,243,273,304,334],k=function(e,t){return T[t]+365*(e-1970)+O((e-1969+(t=+(t>1)))/4)-O((e-1901+t)/100)+O((e-1601+t)/400)};if((p=g.hasOwnProperty)||(p=function(e){var t,n={};return(n.__proto__=null,n.__proto__={toString:1},n).toString!=b?p=function(e){var t=this.__proto__,n=e in(this.__proto__=null,this);return this.__proto__=t,n}:(t=n.constructor,p=function(e){var n=(this.constructor||t).prototype;return e in this&&!(e in n&&this[e]===n[e])}),n=null,p.call(this,e)}),v=function(e,t){var n,r,o,i=0;(n=function(){this.valueOf=0}).prototype.valueOf=0,r=new n;for(o in r)p.call(r,o)&&i++;return n=r=null,i?v=2==i?function(e,t){var n,r={},o=b.call(e)==x;for(n in e)o&&"prototype"==n||p.call(r,n)||!(r[n]=1)||!p.call(e,n)||t(n)}:function(e,t){var n,r,o=b.call(e)==x;for(n in e)o&&"prototype"==n||!p.call(e,n)||(r="constructor"===n)||t(n);(r||p.call(e,n="constructor"))&&t(n)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],v=function(e,t){var n,o,i=b.call(e)==x,a=!i&&"function"!=typeof e.constructor&&s[typeof e.hasOwnProperty]&&e.hasOwnProperty||p;for(n in e)i&&"prototype"==n||!a.call(e,n)||t(n);for(o=r.length;n=r[--o];a.call(e,n)&&t(n));}),v(e,t)},!n("json-stringify")){var A={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},I="000000",U=function(e,t){return(I+(t||0)).slice(-e)},L="\\u00",R=function(e){for(var t='"',n=0,r=e.length,o=!j||r>10,i=o&&(j?e.split(""):e);r>n;n++){var s=e.charCodeAt(n);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:t+=A[s];break;default:if(32>s){t+=L+U(2,s.toString(16));break}t+=o?i[n]:e.charAt(n)}}return t+'"'},M=function(e,t,n,r,o,i,s){var a,c,u,l,h,d,g,y,w,x,j,T,A,I,L,P;try{a=t[e]}catch(D){}if("object"==typeof a&&a)if(c=b.call(a),c!=_||p.call(a,"toJSON"))"function"==typeof a.toJSON&&(c!=E&&c!=S&&c!=C||p.call(a,"toJSON"))&&(a=a.toJSON(e));else if(a>-1/0&&1/0>a){if(k){for(h=O(a/864e5),u=O(h/365.2425)+1970-1;k(u+1,0)<=h;u++);for(l=O((h-k(u,0))/30.42);k(u,l+1)<=h;l++);h=1+h-k(u,l),d=(a%864e5+864e5)%864e5,g=O(d/36e5)%24,y=O(d/6e4)%60,w=O(d/1e3)%60,x=d%1e3}else u=a.getUTCFullYear(),l=a.getUTCMonth(),h=a.getUTCDate(),g=a.getUTCHours(),y=a.getUTCMinutes(),w=a.getUTCSeconds(),x=a.getUTCMilliseconds();a=(0>=u||u>=1e4?(0>u?"-":"+")+U(6,0>u?-u:u):U(4,u))+"-"+U(2,l+1)+"-"+U(2,h)+"T"+U(2,g)+":"+U(2,y)+":"+U(2,w)+"."+U(3,x)+"Z"}else a=null;if(n&&(a=n.call(t,e,a)),null===a)return"null";if(c=b.call(a),c==N)return""+a;if(c==E)return a>-1/0&&1/0>a?""+a:"null";if(c==S)return R(""+a);if("object"==typeof a){for(I=s.length;I--;)if(s[I]===a)throw f();if(s.push(a),j=[],L=i,i+=o,c==C){for(A=0,I=a.length;I>A;A++)T=M(A,a,n,r,o,i,s),j.push(T===m?"null":T);P=j.length?o?"[\n"+i+j.join(",\n"+i)+"\n"+L+"]":"["+j.join(",")+"]":"[]"}else v(r||a,function(e){var t=M(e,a,n,r,o,i,s);t!==m&&j.push(R(e)+":"+(o?" ":"")+t)}),P=j.length?o?"{\n"+i+j.join(",\n"+i)+"\n"+L+"}":"{"+j.join(",")+"}":"{}";return s.pop(),P}};t.stringify=function(e,t,n){var r,o,i,a;if(s[typeof t]&&t)if((a=b.call(t))==x)o=t;else if(a==C){i={};for(var c,u=0,l=t.length;l>u;c=t[u++],a=b.call(c),(a==S||a==E)&&(i[c]=1));}if(n)if((a=b.call(n))==E){if((n-=n%1)>0)for(r="",n>10&&(n=10);r.length<n;r+=" ");}else a==S&&(r=n.length<=10?n:n.slice(0,10));return M("",(c={},c[""]=e,c),o,i,r,"",[])}}if(!n("json-parse")){var P,D,$=i.fromCharCode,W={92:"\\",34:'"',47:"/",98:"\b",116:"	",110:"\n",102:"\f",114:"\r"},F=function(){throw P=D=null,l()},q=function(){for(var e,t,n,r,o,i=D,s=i.length;s>P;)switch(o=i.charCodeAt(P)){case 9:case 10:case 13:case 32:P++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=j?i.charAt(P):i[P],P++,e;case 34:for(e="@",P++;s>P;)if(o=i.charCodeAt(P),32>o)F();else if(92==o)switch(o=i.charCodeAt(++P)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=W[o],P++;break;case 117:for(t=++P,n=P+4;n>P;P++)o=i.charCodeAt(P),o>=48&&57>=o||o>=97&&102>=o||o>=65&&70>=o||F();e+=$("0x"+i.slice(t,P));break;default:F()}else{if(34==o)break;for(o=i.charCodeAt(P),t=P;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++P);e+=i.slice(t,P)}if(34==i.charCodeAt(P))return P++,e;F();default:if(t=P,45==o&&(r=!0,o=i.charCodeAt(++P)),o>=48&&57>=o){for(48==o&&(o=i.charCodeAt(P+1),o>=48&&57>=o)&&F(),r=!1;s>P&&(o=i.charCodeAt(P),o>=48&&57>=o);P++);if(46==i.charCodeAt(P)){for(n=++P;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==P&&F(),P=n}if(o=i.charCodeAt(P),101==o||69==o){for(o=i.charCodeAt(++P),(43==o||45==o)&&P++,n=P;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==P&&F(),P=n}return+i.slice(t,P)}if(r&&F(),"true"==i.slice(P,P+4))return P+=4,!0;if("false"==i.slice(P,P+5))return P+=5,!1;if("null"==i.slice(P,P+4))return P+=4,null;F()}return"$"},V=function(e){var t,n;if("$"==e&&F(),"string"==typeof e){if("@"==(j?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];e=q(),"]"!=e;n||(n=!0))n&&(","==e?(e=q(),"]"==e&&F()):F()),","==e&&F(),t.push(V(e));return t}if("{"==e){for(t={};e=q(),"}"!=e;n||(n=!0))n&&(","==e?(e=q(),"}"==e&&F()):F()),(","==e||"string"!=typeof e||"@"!=(j?e.charAt(0):e[0])||":"!=q())&&F(),t[e.slice(1)]=V(q());return t}F()}return e},J=function(e,t,n){var r=B(e,t,n);r===m?delete e[t]:e[t]=r},B=function(e,t,n){var r,o=e[t];if("object"==typeof o&&o)if(b.call(o)==C)for(r=o.length;r--;)J(o,r,n);else v(o,function(e){J(o,e,n)});return n.call(e,t,o)};t.parse=function(e,t){var n,r;return P=0,D=""+e,n=V(q()),"$"!=q()&&F(),P=D=null,t&&b.call(t)==x?B((r={},r[""]=n,r),"",t):n}}}return t.runInContext=o,t}var i="function"==typeof e&&e.amd,s={"function":!0,object:!0},a=s[typeof r]&&r&&!r.nodeType&&r,c=s[typeof window]&&window||this,u=a&&s[typeof n]&&n&&!n.nodeType&&"object"==typeof t&&t;if(!u||u.global!==u&&u.window!==u&&u.self!==u||(c=u),a&&!i)o(c,a);else{var l=c.JSON,f=c.JSON3,h=!1,d=o(c,c.JSON3={noConflict:function(){return h||(h=!0,c.JSON=l,c.JSON3=f,l=f=null),d}});c.JSON={parse:d.parse,stringify:d.stringify}}i&&e(function(){return d})}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],59:[function(e,t){"use strict";function n(e,t,c){if(!(this instanceof n))return new n(e,t,c);var u,l,f,h,d=s.test(e),p=typeof t,v=this,m=0;for("object"!==p&&"string"!==p&&(c=t,t=null),c&&"function"!=typeof c&&(c=i.parse),t=o(t);m<a.length;m++)l=a[m],u=l[0],h=l[1],u!==u?v[h]=e:"string"==typeof u?~(f=e.indexOf(u))&&("number"==typeof l[2]?(v[h]=e.slice(0,f),e=e.slice(f+l[2])):(v[h]=e.slice(f),e=e.slice(0,f))):(f=u.exec(e))&&(v[h]=f[1],e=e.slice(0,e.length-f[0].length)),v[h]=v[h]||(l[3]||"port"===h&&d?t[h]||"":""),l[4]&&(v[h]=v[h].toLowerCase());c&&(v.query=c(v.query)),r(v.port,v.protocol)||(v.host=v.hostname,v.port=""),v.username=v.password="",v.auth&&(l=v.auth.split(":"),v.username=l[0]||"",v.password=l[1]||""),v.href=v.toString()}var r=e("requires-port"),o=e("./lolcation"),i=e("querystringify"),s=/^\/(?!\/)/,a=[["#","hash"],["?","query"],["//","protocol",2,1,1],["/","pathname"],["@","auth",1],[0/0,"host",void 0,1,1],[/\:(\d+)$/,"port"],[0/0,"hostname",void 0,1,1]];n.prototype.set=function(e,t,n){var o=this;return"query"===e?("string"==typeof t&&(t=(n||i.parse)(t)),o[e]=t):"port"===e?(o[e]=t,r(t,o.protocol)?t&&(o.host=o.hostname+":"+t):(o.host=o.hostname,o[e]="")):"hostname"===e?(o[e]=t,o.port&&(t+=":"+o.port),o.host=t):"host"===e?(o[e]=t,/\:\d+/.test(t)&&(t=t.split(":"),o.hostname=t[0],o.port=t[1])):o[e]=t,o.href=o.toString(),o},n.prototype.toString=function(e){e&&"function"==typeof e||(e=i.stringify);var t,n=this,r=n.protocol+"//";return n.username&&(r+=n.username,n.password&&(r+=":"+n.password),r+="@"),r+=n.hostname,n.port&&(r+=":"+n.port),r+=n.pathname,n.query&&(t="object"==typeof n.query?e(n.query):n.query,r+=("?"===t.charAt(0)?"":"?")+t),n.hash&&(r+=n.hash),r},n.qs=i,n.location=o,t.exports=n},{"./lolcation":60,querystringify:61,"requires-port":62}],60:[function(e,t){(function(n){"use strict";var r,o={hash:1,query:1};t.exports=function(t){t=t||n.location||{},r=r||e("./");var i,s={},a=typeof t;if("blob:"===t.protocol)s=new r(unescape(t.pathname),{});else if("string"===a){s=new r(t,{});for(i in o)delete s[i]}else if("object"===a)for(i in t)i in o||(s[i]=t[i]);return s}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./":59}],61:[function(e,t,n){"use strict";function r(e){for(var t,n=/([^=?&]+)=([^&]*)/g,r={};t=n.exec(e);r[decodeURIComponent(t[1])]=decodeURIComponent(t[2]));return r}function o(e,t){t=t||"";var n=[];"string"!=typeof t&&(t="?");for(var r in e)i.call(e,r)&&n.push(encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return n.length?t+n.join("&"):""}var i=Object.prototype.hasOwnProperty;n.stringify=o,n.parse=r},{}],62:[function(e,t){"use strict";t.exports=function(e,t){if(t=t.split(":")[0],e=+e,!e)return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 22!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},{}]},{},[1])(1)}),function(){var e,t,n,r,o={}.hasOwnProperty,i=[].slice;e={LF:"\n",NULL:"\x00"},n=function(){function t(e,t,n){this.command=e,this.headers=null!=t?t:{},this.body=null!=n?n:""}var n;return t.prototype.toString=function(){var n,r,i,s,a;n=[this.command],i=this.headers["content-length"]===!1?!0:!1,i&&delete this.headers["content-length"],a=this.headers;for(r in a)o.call(a,r)&&(s=a[r],n.push(""+r+":"+s));return this.body&&!i&&n.push("content-length:"+t.sizeOfUTF8(this.body)),n.push(e.LF+this.body),n.join(e.LF)},t.sizeOfUTF8=function(e){return e?encodeURI(e).match(/%..|./g).length:0},n=function(n){var r,o,i,s,a,c,u,l,f,h,d,p,v,m,g,b,y;for(s=n.search(RegExp(""+e.LF+e.LF)),a=n.substring(0,s).split(e.LF),i=a.shift(),c={},p=function(e){return e.replace(/^\s+|\s+$/g,"")},b=a.reverse(),v=0,g=b.length;g>v;v++)h=b[v],l=h.indexOf(":"),c[p(h.substring(0,l))]=p(h.substring(l+1));if(r="",d=s+2,c["content-length"])f=parseInt(c["content-length"]),r=(""+n).substring(d,d+f);else for(o=null,u=m=d,y=n.length;(y>=d?y>m:m>y)&&(o=n.charAt(u),o!==e.NULL);u=y>=d?++m:--m)r+=o;return new t(i,c,r)},t.unmarshall=function(t){var r;return function(){var o,i,s,a;for(s=t.split(RegExp(""+e.NULL+e.LF+"*")),a=[],o=0,i=s.length;i>o;o++)r=s[o],(null!=r?r.length:void 0)>0&&a.push(n(r));return a}()},t.marshall=function(n,r,o){var i;return i=new t(n,r,o),i.toString()+e.NULL},t}(),t=function(){function t(e){this.ws=e,this.ws.binaryType="arraybuffer",this.counter=0,this.connected=!1,this.heartbeat={outgoing:1e4,incoming:1e4},this.maxWebSocketFrameSize=16384,this.subscriptions={}}var o;return t.prototype.debug=function(e){var t;return"undefined"!=typeof window&&null!==window&&null!=(t=window.console)?t.log(e):void 0},o=function(){return Date.now?Date.now():(new Date).valueOf},t.prototype._transmit=function(e,t,r){var o;for(o=n.marshall(e,t,r),"function"==typeof this.debug&&this.debug(">>> "+o);;){if(!(o.length>this.maxWebSocketFrameSize))return this.ws.send(o);this.ws.send(o.substring(0,this.maxWebSocketFrameSize)),o=o.substring(this.maxWebSocketFrameSize),"function"==typeof this.debug&&this.debug("remaining = "+o.length)}},t.prototype._setupHeartbeat=function(t){var n,i,s,a,c,u;if((c=t.version)===r.VERSIONS.V1_1||c===r.VERSIONS.V1_2)return u=function(){var e,n,r,o;for(r=t["heart-beat"].split(","),o=[],e=0,n=r.length;n>e;e++)a=r[e],o.push(parseInt(a));return o}(),i=u[0],n=u[1],0!==this.heartbeat.outgoing&&0!==n&&(s=Math.max(this.heartbeat.outgoing,n),"function"==typeof this.debug&&this.debug("send PING every "+s+"ms"),this.pinger=r.setInterval(s,function(t){return function(){return t.ws.send(e.LF),"function"==typeof t.debug?t.debug(">>> PING"):void 0}}(this))),0!==this.heartbeat.incoming&&0!==i?(s=Math.max(this.heartbeat.incoming,i),"function"==typeof this.debug&&this.debug("check PONG every "+s+"ms"),this.ponger=r.setInterval(s,function(e){return function(){var t;return t=o()-e.serverActivity,t>2*s?("function"==typeof e.debug&&e.debug("did not receive server activity for the last "+t+"ms"),e.ws.close()):void 0}}(this))):void 0},t.prototype._parseConnect=function(){var e,t,n,r;switch(e=1<=arguments.length?i.call(arguments,0):[],r={},e.length){case 2:r=e[0],t=e[1];break;case 3:e[1]instanceof Function?(r=e[0],t=e[1],n=e[2]):(r.login=e[0],r.passcode=e[1],t=e[2]);break;case 4:r.login=e[0],r.passcode=e[1],t=e[2],n=e[3];break;default:r.login=e[0],r.passcode=e[1],t=e[2],n=e[3],r.host=e[4]}return[r,t,n]},t.prototype.connect=function(){var t,s,a,c;return t=1<=arguments.length?i.call(arguments,0):[],c=this._parseConnect.apply(this,t),a=c[0],this.connectCallback=c[1],s=c[2],"function"==typeof this.debug&&this.debug("Opening Web Socket..."),this.ws.onmessage=function(t){return function(r){var i,a,c,u,l,f,h,d,p,v,m,g;if(u="undefined"!=typeof ArrayBuffer&&r.data instanceof ArrayBuffer?(i=new Uint8Array(r.data),"function"==typeof t.debug?t.debug("--- got data length: "+i.length):void 0,function(){var e,t,n;for(n=[],e=0,t=i.length;t>e;e++)a=i[e],n.push(String.fromCharCode(a));return n}().join("")):r.data,t.serverActivity=o(),u===e.LF)return void("function"==typeof t.debug&&t.debug("<<< PONG"));for("function"==typeof t.debug&&t.debug("<<< "+u),m=n.unmarshall(u),g=[],p=0,v=m.length;v>p;p++)switch(l=m[p],l.command){case"CONNECTED":"function"==typeof t.debug&&t.debug("connected to server "+l.headers.server),t.connected=!0,t._setupHeartbeat(l.headers),g.push("function"==typeof t.connectCallback?t.connectCallback(l):void 0);break;case"MESSAGE":d=l.headers.subscription,h=t.subscriptions[d]||t.onreceive,h?(c=t,f=l.headers["message-id"],l.ack=function(e){return null==e&&(e={}),c.ack(f,d,e)},l.nack=function(e){return null==e&&(e={}),c.nack(f,d,e)},g.push(h(l))):g.push("function"==typeof t.debug?t.debug("Unhandled received MESSAGE: "+l):void 0);break;case"RECEIPT":g.push("function"==typeof t.onreceipt?t.onreceipt(l):void 0);break;case"ERROR":g.push("function"==typeof s?s(l):void 0);break;default:g.push("function"==typeof t.debug?t.debug("Unhandled frame: "+l):void 0)}return g}}(this),this.ws.onclose=function(e){return function(){var t;return t="Whoops! Lost connection to "+e.ws.url,"function"==typeof e.debug&&e.debug(t),e._cleanUp(),"function"==typeof s?s(t):void 0}}(this),this.ws.onopen=function(e){return function(){return"function"==typeof e.debug&&e.debug("Web Socket Opened..."),a["accept-version"]=r.VERSIONS.supportedVersions(),a["heart-beat"]=[e.heartbeat.outgoing,e.heartbeat.incoming].join(","),e._transmit("CONNECT",a)}}(this)},t.prototype.disconnect=function(e,t){return null==t&&(t={}),this._transmit("DISCONNECT",t),this.ws.onclose=null,this.ws.close(),this._cleanUp(),"function"==typeof e?e():void 0},t.prototype._cleanUp=function(){return this.connected=!1,this.pinger&&r.clearInterval(this.pinger),this.ponger?r.clearInterval(this.ponger):void 0},t.prototype.send=function(e,t,n){return null==t&&(t={}),null==n&&(n=""),t.destination=e,this._transmit("SEND",t,n)},t.prototype.subscribe=function(e,t,n){var r;return null==n&&(n={}),n.id||(n.id="sub-"+this.counter++),n.destination=e,this.subscriptions[n.id]=t,this._transmit("SUBSCRIBE",n),r=this,{id:n.id,unsubscribe:function(){return r.unsubscribe(n.id)}}},t.prototype.unsubscribe=function(e){return delete this.subscriptions[e],this._transmit("UNSUBSCRIBE",{id:e})},t.prototype.begin=function(e){var t,n;return n=e||"tx-"+this.counter++,this._transmit("BEGIN",{transaction:n}),t=this,{id:n,commit:function(){return t.commit(n)},abort:function(){return t.abort(n)}}},t.prototype.commit=function(e){return this._transmit("COMMIT",{transaction:e})},t.prototype.abort=function(e){return this._transmit("ABORT",{transaction:e})},t.prototype.ack=function(e,t,n){return null==n&&(n={}),n["message-id"]=e,n.subscription=t,this._transmit("ACK",n)},t.prototype.nack=function(e,t,n){return null==n&&(n={}),n["message-id"]=e,n.subscription=t,this._transmit("NACK",n)},t}(),r={VERSIONS:{V1_0:"1.0",V1_1:"1.1",V1_2:"1.2",supportedVersions:function(){return"1.1,1.0"}},client:function(e,n){var o,i;return null==n&&(n=["v10.stomp","v11.stomp"]),o=r.WebSocketClass||WebSocket,i=new o(e,n),new t(i)},over:function(e){return new t(e)},Frame:n},"undefined"!=typeof exports&&null!==exports&&(exports.Stomp=r),"undefined"!=typeof window&&null!==window?(r.setInterval=function(e,t){return window.setInterval(t,e)},r.clearInterval=function(e){return window.clearInterval(e)},window.Stomp=r):exports||(self.Stomp=r)}.call(this);
//# sourceMappingURL=data:application/json;base64,